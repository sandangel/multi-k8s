apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: __BRANCH_NAME__-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    certmanager.k8s.io/cluster-issuer: 'letsencrypt-prod'

spec:
  tls:
    - hosts:
        - '*.san-ng.dev'
        - 'san-ng.dev'
      secretName: san-ng-dev-wildcard
  rules:
    - &host_rule
      host: san-ng.dev
      http:
        paths:
          - path: /?(.*)
            backend:
              serviceName: client-cluster-ip-service
              servicePort: 3000
          - path: /api/?(.*)
            backend:
              serviceName: server-cluster-ip-service
              servicePort: 5000
    - host: __BRANCH_NAME__.san-ng.dev
      http:
        paths:
          - path: /?(.*)
            backend:
              serviceName: client-cluster-ip-service-__BRANCH_NAME__
              servicePort: 3000
          - path: /api/?(.*)
            backend:
              serviceName: server-cluster-ip-service-__BRANCH_NAME__
              servicePort: 5000

### client-deployment
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment-__BRANCH_NAME__
spec:
  replicas: 1
  selector:
    matchLabels:
      component: web-__BRANCH_NAME__
  template:
    metadata:
      labels:
        component: web-__BRANCH_NAME__
    spec:
      containers:
        - name: client
          image: asia.gcr.io/__PROJECT_ID__/multi-client:__SHORT_SHA__
          ports:
            - containerPort: 3000

---

apiVersion: v1
kind: Service
metadata:
  name: client-cluster-ip-service-__BRANCH_NAME__
spec:
  type: ClusterIP
  selector:
    component: web-__BRANCH_NAME__
  ports:
    - port: 3000
      targetPort: 3000

### server-deployment
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment-__BRANCH_NAME__
spec:
  replicas: 3
  selector:
    matchLabels:
      component: server-__BRANCH_NAME__
  template:
    metadata:
      labels:
        component: server-__BRANCH_NAME__
    spec:
      containers:
        - name: server
          image: asia.gcr.io/__PROJECT_ID__/multi-server:__SHORT_SHA__
          ports:
            - containerPort: 5000
          env:
            - name: REDIS_HOST
              value: redis-cluster-ip-service
            - name: REDIS_PORT
              value: '6379'
            - name: PGUSER
              value: postgres
            - name: PGHOST
              value: postgres-cluster-ip-service
            - name: PGPORT
              value: '5432'
            - name: PGDATABASE
              value: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD

---

apiVersion: v1
kind: Service
metadata:
  name: server-cluster-ip-service-__BRANCH_NAME__
spec:
  type: ClusterIP
  selector:
    component: server-__BRANCH_NAME__
  ports:
    - port: 5000
      targetPort: 5000

### worker-deployment
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deployment-__BRANCH_NAME__
spec:
  replicas: 1
  selector:
    matchLabels:
      component: worker-__BRANCH_NAME__
  template:
    metadata:
      labels:
        component: worker-__BRANCH_NAME__
    spec:
      containers:
        - name: worker
          image: asia.gcr.io/__PROJECT_ID__/multi-worker:__SHORT_SHA__
          env:
            - name: REDIS_HOST
              value: redis-cluster-ip-service
            - name: REDIST_PORT
              value: '6379'

### database
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-persistent-volume-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: postgres
  template:
    metadata:
      labels:
        component: postgres
    spec:
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: database-persistent-volume-claim
      containers:
        - name: postgres
          image: postgres
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-cluster-ip-service
spec:
  type: ClusterIP
  selector:
    component: postgres
  ports:
    - port: 5432
      targetPort: 5432

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-ip-service
spec:
  type: ClusterIP
  selector:
    component: redis
  ports:
    - port: 6379
      targetPort: 6379
